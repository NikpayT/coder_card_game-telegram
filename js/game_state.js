// js/game_state.js

let gameState = {};
let currentNegotiation = { playerId: null, type: null, itemKey: null };
let currentMatchSimulation = null;
let currentPressConferenceContext = null;

function getDefaultGameState() {
    function getDefaultGameState() {
    return {
        // ... –≤—Å–µ —Ç–≤–æ–∏ —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        transactions: [],
        lastTransactionsBreakdown: { income: {}, expense: {} },
        clubHistory: {},      // <--- –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
        leagueRecords: {},    // <--- –ò –≠–¢–£
        settings: {
            autoSave: true,
            matchSimulationSpeed: 100
        }
    };
}
    const initialFacilities = {};
    if (typeof FACILITY_LEVELS !== 'undefined') {
        for (const key in FACILITY_LEVELS) {
            initialFacilities[key] = { level: 0, upgradeInProgress: false, weeksToComplete: 0 };
        }
    } else {
        console.error("CRITICAL: FACILITY_LEVELS is not defined! Cannot initialize default facilities.");
    }

    let firstYouthIntakeWeek = (typeof YOUTH_INTAKE_WEEKS !== 'undefined' && YOUTH_INTAKE_WEEKS.length > 0) ? YOUTH_INTAKE_WEEKS[0] : 8;
    if (typeof YOUTH_INTAKE_WEEKS !== 'undefined' && YOUTH_INTAKE_WEEKS.length > 1 && firstYouthIntakeWeek < 5) {
        firstYouthIntakeWeek = YOUTH_INTAKE_WEEKS[1] || YOUTH_INTAKE_WEEKS[0];
    }

    const baseStartingBudget = typeof STARTING_BUDGET !== 'undefined' ? STARTING_BUDGET : 500000;
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ –ª–∏–≥–µ: CPU_TEAM_NAMES.length + 1 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    const totalTeamsInLeague = (typeof CPU_TEAM_NAMES !== 'undefined' ? CPU_TEAM_NAMES.length : 16) + 1;
    // –î–ª–∏–Ω–∞ —Å–µ–∑–æ–Ω–∞: (N-1)*2 –µ—Å–ª–∏ N —á–µ—Ç–Ω–æ–µ, –∏–ª–∏ N*2 –µ—Å–ª–∏ N –Ω–µ—á–µ—Ç–Ω–æ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è "BYE" (–Ω–æ –ø—Ä–æ—â–µ —Å—á–∏—Ç–∞—Ç—å N*2 –µ—Å–ª–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å "BYE" –¥–ª—è –Ω–µ—á–µ—Ç–Ω—ã—Ö)
    // –í generateLeagueSchedule –º—ã –¥–æ–±–∞–≤–ª—è–µ–º "BYE" –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, —Ç–∞–∫ —á—Ç–æ (totalTeamsWithBye - 1) * 2
    const effectiveTeamsForSchedule = totalTeamsInLeague % 2 === 0 ? totalTeamsInLeague : totalTeamsInLeague + 1;
    const baseSeasonLength = (effectiveTeamsForSchedule -1) * 2;

    const baseFanHappiness = typeof BASE_FAN_HAPPINESS !== 'undefined' ? BASE_FAN_HAPPINESS : 60;
    const baseBoardConfidence = typeof BASE_BOARD_CONFIDENCE !== 'undefined' ? BASE_BOARD_CONFIDENCE : 55;
    const baseRequiredStarters = typeof REQUIRED_STARTERS !== 'undefined' ? REQUIRED_STARTERS : 11;
    const defaultCupRounds = (typeof CUP_COMPETITIONS !== 'undefined' && CUP_COMPETITIONS.nationalCup && CUP_COMPETITIONS.nationalCup.rounds) ? CUP_COMPETITIONS.nationalCup.rounds : ["1/4 —Ñ–∏–Ω–∞–ª–∞", "–ü–æ–ª—É—Ñ–∏–Ω–∞–ª", "–§–∏–Ω–∞–ª"];


    return {
        clubName: "–§–ö –ü—Ä–æ–≥—Ä–µ—Å—Å",
        avatar: "üëî",
        budget: baseStartingBudget,
        currentWeek: 1,
        currentSeason: 1,
        seasonLength: baseSeasonLength,
        fanHappiness: baseFanHappiness,
        boardConfidence: baseBoardConfidence,
        userTeam: {
            name: "–§–ö –ü—Ä–æ–≥—Ä–µ—Å—Å",
            id: "user_team_01",
            players: [],
            coach: null,
            staff: {
                assistantCoach: null, chiefScout: null, physio: null, youthCoach: null,
                scouts: []
            },
            formation: "4-4-2",
            tactic: "balanced",
            teamTrainingFocus: "none",
            startingXI: Array(baseRequiredStarters).fill(null),
            trainingSlotsUsed: 0,
            youthAcademy: {
                players: [],
                nextIntakeWeek: firstYouthIntakeWeek
            },
            facilities: initialFacilities,
            sponsors: [],
            activeNationalCup: null,
            activeContinentalCup: null,
            totalScoutingAssignments: 0,
            reputation: 40,
            seasonObjectives: {
                leaguePosition: Math.ceil(totalTeamsInLeague / 2.5),
                cupProgress: defaultCupRounds[Math.floor(defaultCupRounds.length / 3)] || defaultCupRounds[0] || "–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª"
            },
            teamAtmosphere: 65,
            weeklyIncome: 0,
            weeklyExpense: 0
        },
        cpuTeams: [],
        leagueTable: {},
        schedule: [],
        transferMarket: {
            players: [],
            cpuInterestInUserPlayers: [],
            userShortlist: []
        },
        availableCoaches: [],
        availableStaff: {
            assistantCoach: [], chiefScout: [], physio: [], youthCoach: [], scout: []
        },
        news: [],
        transactions: [],
        lastTransactionsBreakdown: { income: {}, expense: {}, week: 0, season: 0 },
        playerIdCounter: 0,
        staffIdCounter: 0,
        matchIdCounter: 0,
        gameInitialized: false,
        pressConferenceCooldown: 0,
        teamMeetingCooldown: 0,
        internationalBreakActive: false,
        settings: {
            matchSimulationSpeed: 150,
            autoSave: true,
            difficulty: "normal",
            showTutorials: true
        }
    };
}

function initOrResetGameState(clubNameFromInput, avatarFromInput) {
    gameState = getDefaultGameState();
    if (clubNameFromInput) gameState.clubName = clubNameFromInput.slice(0, 25);
    if (avatarFromInput) gameState.avatar = avatarFromInput;
    if (gameState.userTeam) {
        gameState.userTeam.name = gameState.clubName;
    }
    gameState.gameInitialized = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ –≤—ã–∑–æ–≤–∞ startGameLogic

    currentNegotiation = { playerId: null, type: null, itemKey: null };
    currentMatchSimulation = null;
    currentPressConferenceContext = null;
    console.log("Game state has been reset to default values.");
}


function saveGame() {
    if (!gameState || !gameState.gameInitialized) {
        if (typeof showMessage === "function") showMessage("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–Ω–∞—á–∞—Ç—É—é –∏–≥—Ä—É.");
        else console.warn("showMessage –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏–≥—Ä–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞).");
        return;
    }
    try {
        if (typeof localStorage !== 'undefined') {
            localStorage.setItem('footballManagerGrandState_v2.1', JSON.stringify(gameState));
            if (typeof showMessage === "function") showMessage("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
            else alert("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (showMessage –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞)");
        } else {
            console.error("localStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É.");
            if (typeof showMessage === "function") showMessage("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "localStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.");
            else alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: localStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.");
        }
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã:", e);
        if (typeof showMessage === "function") showMessage("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É. ${e.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—Ç–æ –≤ localStorage.`);
        else alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
    }
}

function loadGame() {
    if (typeof localStorage === 'undefined') {
        console.error("localStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É.");
        if (typeof showMessage === "function") showMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "localStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.");
        return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã initGameFlow –ø–æ–∫–∞–∑–∞–ª —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    }
    try {
        const savedStateJSON = localStorage.getItem('footballManagerGrandState_v2.1');
        if (savedStateJSON) {
            const loadedState = JSON.parse(savedStateJSON);
            const defaultState = getDefaultGameState(); // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ defaultState –±—É–¥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å,
            // –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
            gameState = deepMerge(defaultState, loadedState);

            // –í–∞–∂–Ω–æ: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ gameInitialized —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ true, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
            // –∏ —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ defaultState, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–º–µ—Ç—å gameInitialized = false.
            // –ï—Å–ª–∏ loadedState –∏–º–µ–ª gameInitialized=true, —Ç–æ –∏ gameState.gameInitialized –±—É–¥–µ—Ç true –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è.
            // –ï—Å–ª–∏ –∂–µ –º—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ —á—Ç–æ-—Ç–æ, –≥–¥–µ gameInitialized –±—ã–ª–æ false, —Ç–æ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞.
            // –ù–æ –æ–±—ã—á–Ω–æ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, gameInitialized = true.
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
            if (!loadedState.gameInitialized) { // –ï—Å–ª–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫–µ –∏–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
                console.warn("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º–µ–ª–æ gameInitialized = false. –í–æ–∑–º–æ–∂–Ω–∞ –Ω–µ–ø–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞.");
                // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ –¥–µ—Ñ–æ–ª—Ç–∞, –¥–∞–µ–º —à–∞–Ω—Å –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º.
            }
            gameState.gameInitialized = true; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º true –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–ª–∏—è–Ω–∏—è

            if (typeof showMessage === "function") showMessage("–ó–∞–≥—Ä—É–∑–∫–∞", "–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
            else alert("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (showMessage –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞)");
            return true; // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        } else {
            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ localStorage.");
            // –ù–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å initOrResetGameState –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ DOMContentLoaded.
            // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã initGameFlow –ø–æ–∫–∞–∑–∞–ª —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
            return false;
        }
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã:", e);
        if (typeof showMessage === "function") showMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã (${e.message}).`);
        else alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.");
        localStorage.removeItem('footballManagerGrandState_v2.1');
        // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ initOrResetGameState —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω.
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã initGameFlow –ø–æ–∫–∞–∑–∞–ª —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        return false;
    }
}

function deepMerge(target, source) {
    const output = { ...target }; // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–ø–∏–∏ target (–æ–±—ã—á–Ω–æ —ç—Ç–æ defaultState)
    if (isObject(target) && isObject(source)) {
        Object.keys(source).forEach(key => { // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (source)
            const sourceValue = source[key];
            const targetValue = target[key]; // –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ defaultState

            if (target.hasOwnProperty(key)) { // –ï—Å–ª–∏ –∫–ª—é—á –∏–∑ source –µ—Å—Ç—å –∏ –≤ target (defaultState)
                if (Array.isArray(sourceValue)) {
                     // –ú–∞—Å—Å–∏–≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è—é—Ç—Å—è –∏–∑ source, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ source
                    output[key] = [...sourceValue];
                } else if (isObject(sourceValue)) {
                    if (isObject(targetValue)) { // –û–±–∞ –æ–±—ä–µ–∫—Ç—ã, —Å–ª–∏–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                        output[key] = deepMerge(targetValue, sourceValue);
                    } else { // –í target –Ω–µ –æ–±—ä–µ–∫—Ç (–∏–ª–∏ null), –Ω–æ –≤ source –æ–±—ä–µ–∫—Ç - –±–µ—Ä–µ–º –∏–∑ source
                        output[key] = { ...sourceValue };
                    }
                } else if (sourceValue !== undefined) { // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ source (–Ω–µ undefined)
                    output[key] = sourceValue;
                }
                // –ï—Å–ª–∏ sourceValue === undefined, —Ç–æ –≤ output[key] –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ target (defaultState)
            } else { // –ï—Å–ª–∏ –∫–ª—é—á–∞ –∏–∑ source –Ω–µ—Ç –≤ target, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ defaultState - –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
                output[key] = isObject(sourceValue) ? { ...sourceValue } : (Array.isArray(sourceValue) ? [...sourceValue] : sourceValue);
            }
        });
        // –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ target (defaultState), –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ source (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        // –≠—Ç–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ gameState, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ —Å—Ç–∞—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        Object.keys(target).forEach(key => {
            if (!source.hasOwnProperty(key)) {
                output[key] = target[key];
            }
        });
    }
    return output;
}


function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
}

function getNextPlayerId() {
    gameState.playerIdCounter = (gameState.playerIdCounter || 0) + 1;
    return gameState.playerIdCounter;
}

function getNextStaffId() {
    gameState.staffIdCounter = (gameState.staffIdCounter || 0) + 1;
    return `S-${gameState.staffIdCounter}`;
}

function getNextMatchId(prefix = "M") {
    gameState.matchIdCounter = (gameState.matchIdCounter || 0) + 1;
    const randomSuffix = Math.random().toString(36).substring(2, 7);
    const currentWeek = (gameState && gameState.currentWeek) ? gameState.currentWeek : 1;
    const currentSeason = (gameState && gameState.currentSeason) ? gameState.currentSeason : 1;
    return `${prefix}-${currentSeason}-${String(currentWeek).padStart(2,'0')}-${gameState.matchIdCounter}-${randomSuffix}`;
}

function calculateEndDate(startWeek, startSeason, durationWeeks) {
    let endWeek = startWeek + durationWeeks -1; // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ–¥–µ–ª—è —Å—Ç–∞—Ä—Ç–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞
    let endSeason = startSeason;
    const seasonLen = (gameState && gameState.seasonLength && gameState.seasonLength > 0) ? gameState.seasonLength : ((typeof CPU_TEAM_NAMES !== 'undefined' ? CPU_TEAM_NAMES.length + 1 : 16) * 2 -2); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞, –µ—Å–ª–∏ gameState.seasonLength –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω

    while (endWeek >= seasonLen) { // –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 52 –Ω–µ–¥–µ–ª–∏, —Å–µ–∑–æ–Ω 52, —Å—Ç–∞—Ä—Ç –Ω–∞ 1, —Ç–æ endWeek=52. 52>=52. endWeek=0, endSeason++. –≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ.
                                 // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ 1 –Ω–µ–¥–µ–ª—é, —Å—Ç–∞—Ä—Ç –Ω–∞ 1. endWeek = 1. –ù–µ –∑–∞–π–¥–µ—Ç –≤ —Ü–∏–∫–ª. week = 1, season = 1.
                                 // –ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –∏—Å—Ç–µ–∫–∞—Ç—å –ü–û–°–õ–ï –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
        endWeek -= seasonLen;    // –ü—Ä–∏–º–µ—Ä: –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ 1 –Ω–µ–¥, —Å—Ç–∞—Ä—Ç –Ω–∞ 1. –ù–µ–¥–µ–ª—è 1 - –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç. –ü–æ—Å–ª–µ –Ω–µ–¥–µ–ª–∏ 1 - –∏—Å—Ç–µ–∫. endWeek=1, endSeason=1.
        endSeason++;             // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ 52 –Ω–µ–¥, —Å—Ç–∞—Ä—Ç –Ω–∞ 1. –ù–µ–¥–µ–ª—è 52 - –¥–µ–π—Å—Ç–≤—É–µ—Ç. –ü–æ—Å–ª–µ 52 - –∏—Å—Ç–µ–∫. endWeek=52, endSeason=1 (–µ—Å–ª–∏ —Å–µ–∑–æ–Ω 52 –Ω–µ–¥)
    }
    // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞: endDate - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è, –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ï–©–ï –¥–µ–π—Å—Ç–≤—É–µ—Ç.
    let actualEndWeek = startWeek + durationWeeks - 1;
    let actualEndSeason = startSeason;
    while (actualEndWeek >= seasonLen) {
        actualEndWeek -= seasonLen;
        actualEndSeason++;
    }
    return { week: actualEndWeek + 1, season: actualEndSeason }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–¥–µ–ª—é, –°–õ–ï–î–£–Æ–©–£–Æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–µ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–∫–æ–≥–¥–∞ –æ–Ω —É–∂–µ –∏—Å—Ç–µ–∫)
}


function getWeeksLeftInContract(player) {
    if (!player || !player.contract || !player.contract.endDate || player.isYouth) {
        return player && player.isYouth ? Infinity : 0;
    }

    let weeksLeft = 0;
    const currentW = (gameState && gameState.currentWeek) ? gameState.currentWeek : 1;
    const currentS = (gameState && gameState.currentSeason) ? gameState.currentSeason : 1;
    const seasonLen = (gameState && gameState.seasonLength && gameState.seasonLength > 0) ? gameState.seasonLength : ((typeof CPU_TEAM_NAMES !== 'undefined' ? CPU_TEAM_NAMES.length + 1 : 16) * 2 -2);

    const contractEndW = player.contract.endDate.week;
    const contractEndS = player.contract.endDate.season;

    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞
    if (contractEndS < currentS || (contractEndS === currentS && contractEndW <= currentW)) {
        return 0;
    }

    if (contractEndS === currentS) {
        weeksLeft = contractEndW - currentW;
    } else { // contractEndS > currentS
        weeksLeft = (seasonLen - currentW) + // –Ω–µ–¥–µ–ª—å –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞ (–Ω–µ –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
                    ((contractEndS - currentS - 1) * seasonLen) + // –Ω–µ–¥–µ–ª—å –≤ –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–µ–∑–æ–Ω–∞—Ö
                    contractEndW; // –Ω–µ–¥–µ–ª—å –≤ –∫–æ–Ω–µ—á–Ω–æ–º —Å–µ–∑–æ–Ω–µ
    }
    return Math.max(0, weeksLeft);
}