// game_data.js - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö SQL-—Ñ—É–Ω–∫—Ü–∏–π –∏ –∏—Ö —á–∞—Å—Ç–µ–π, –∞ —Ç–∞–∫–∂–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
const ALL_CODE_PARTS = [
    {
        id: 'sql_select',
        name: 'SELECT',
        emoji: 'üîç',
        description: '–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.',
        example: 'SELECT column1, column2 FROM table_name;',
        type: 'SQL',
        rarity: 'common' // dbType –Ω–µ —É–∫–∞–∑–∞–Ω - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
    },
    {
        id: 'sql_from',
        name: 'FROM',
        emoji: 'üì¶',
        description: '–£–∫–∞–∑—ã–≤–∞–µ—Ç, –∏–∑ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.',
        example: 'SELECT * FROM Customers;',
        type: 'SQL',
        rarity: 'common'
    },
    // ... –¥—Ä—É–≥–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ...
    {
        id: 'sql_limit',
        name: 'LIMIT', // –£–±–µ—Ä–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –°–£–ë–î –∏–∑ –∏–º–µ–Ω–∏, —Ç.–∫. —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å dbType
        emoji: '‚úÇÔ∏è',
        description: '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫. –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è MySQL/PostgreSQL.',
        example: 'SELECT * FROM Customers LIMIT 10;',
        type: 'SQL',
        rarity: 'uncommon',
        dbType: ['mysql', 'postgresql'] // –ù–û–í–û–ï: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è —ç—Ç–∏—Ö –°–£–ë–î
    },
    {
        id: 'sql_top',
        name: 'TOP', // –£–±–µ—Ä–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –°–£–ë–î –∏–∑ –∏–º–µ–Ω–∏
        emoji: 'üîù',
        description: '–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Å—Ç—Ä–æ–∫. –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è SQL Server.',
        example: 'SELECT TOP 10 * FROM Customers;',
        type: 'SQL',
        rarity: 'uncommon',
        dbType: ['sqlserver'] // –ù–û–í–û–ï: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è SQL Server
    },
    {
        id: 'sql_offset', // OFFSET —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å LIMIT
        name: 'OFFSET',
        emoji: '‚û°Ô∏è',
        description: '–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º. –ß–∞—Å—Ç–æ —Å LIMIT –∏–ª–∏ FETCH.',
        example: 'SELECT * FROM Customers ORDER BY CustomerID LIMIT 10 OFFSET 20; (PostgreSQL/MySQL)',
        type: 'SQL',
        rarity: 'rare',
        dbType: ['mysql', 'postgresql'] // PostgreSQL, MySQL (SQLite —Ç–æ–∂–µ, –Ω–æ –º—ã –µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª—è–µ–º –ø–æ–∫–∞)
    },
    {
        id: 'sql_top_n_percent',
        name: 'TOP N PERCENT',
        emoji: 'üéØ%',
        description: '–í—ã–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–æ–∫ —Å–≤–µ—Ä—Ö—É. –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è SQL Server.',
        example: 'SELECT TOP 50 PERCENT * FROM Customers;',
        type: 'SQL',
        rarity: 'rare',
        dbType: ['sqlserver']
    },
    {
        id: 'sql_pivot',
        name: 'PIVOT',
        emoji: 'üîÑ',
        description: '–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü—ã, –∞–≥—Ä–µ–≥–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ. –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –Ω–æ SQL Server –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π.',
        example: 'SELECT Customer, [ProductA], [ProductB] FROM (SELECT Customer, Product, Quantity FROM Sales) AS SourceTable PIVOT (SUM(Quantity) FOR Product IN ([ProductA], [ProductB])) AS PivotTable;',
        type: 'SQL',
        rarity: 'legendary',
        dbType: ['sqlserver', 'oracle'] // Oracle —Ç–æ–∂–µ –∏–º–µ–µ—Ç PIVOT
    },
    {
        id: 'sql_unpivot',
        name: 'UNPIVOT',
        emoji: '‚ÜîÔ∏è',
        description: '–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ —Å—Ç—Ä–æ–∫–∏.',
        example: 'SELECT Product, Category, Quantity FROM (SELECT ProductA, ProductB FROM Sales) AS SourceTable UNPIVOT (Quantity FOR Category IN (ProductA, ProductB)) AS UnpivotTable;',
        type: 'SQL',
        rarity: 'legendary',
        dbType: ['sqlserver', 'oracle']
    },
    {
        id: 'sql_recursive_cte',
        name: '–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE', // –£–±–µ—Ä–µ–º WITH RECURSIVE –∏–∑ –∏–º–µ–Ω–∏, —Ç.–∫. —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        emoji: '‚ôæÔ∏èüß†',
        description: 'CTE, –∫–æ—Ç–æ—Ä–æ–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Å–µ–±—è, –¥–ª—è –æ–±—Ö–æ–¥–∞ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ –≥—Ä–∞—Ñ–æ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä. (WITH RECURSIVE –≤ PostgreSQL/MySQL, –ø—Ä–æ—Å—Ç–æ WITH –≤ SQL Server/Oracle –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏)',
        example: 'WITH RECURSIVE EmployeeHierarchy AS (...) SELECT * FROM EmployeeHierarchy;',
        type: 'SQL',
        rarity: 'legendary' // –ú–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –ø–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å WITH RECURSIVE —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω
        // dbType: ['postgresql', 'mysql'] // –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –∏–º–µ–Ω–Ω–æ 'WITH RECURSIVE'
    },
    // –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –¥–ª—è PostgreSQL
    {
        id: 'psql_jsonb_ops',
        name: '–û–ø–µ—Ä–∞—Ç–æ—Ä—ã JSONB',
        emoji: 'üìÑ',
        description: '–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö JSONB –≤ PostgreSQL (–Ω–∞–ø—Ä–∏–º–µ—Ä, ->, ->>, @>, <@).',
        example: 'SELECT data ->> \'name\' FROM users WHERE data @> \'{"status":"active"}\';',
        type: 'PostgreSQL', // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π —Ç–∏–ø –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å SQL –∏ —É–∫–∞–∑–∞—Ç—å dbType
        rarity: 'epic',
        dbType: ['postgresql']
    },
    // –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –¥–ª—è Oracle
    {
        id: 'ora_decode',
        name: 'DECODE',
        emoji: 'üî¢',
        description: '–§—É–Ω–∫—Ü–∏—è DECODE –≤ Oracle, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è CASE, –Ω–æ —Å –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π.',
        example: 'SELECT DECODE(status, \'A\', \'Active\', \'I\', \'Inactive\', \'Unknown\') FROM employees;',
        type: 'Oracle',
        rarity: 'rare',
        dbType: ['oracle']
    },
    // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –µ—â–µ ~37 —Ñ—É–Ω–∫—Ü–∏–π, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –¥–ª—è –°–£–ë–î.
    // –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ id.
    // –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É –≤–∞—Å —Å –¥—Ä—É–≥–∏–º–∏ ID):

    // PostgreSQL —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
    { id: 'psql_generate_series', name: 'generate_series()', emoji: 'üìà', description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä—è–¥ –∑–Ω–∞—á–µ–Ω–∏–π. PostgreSQL.', example: 'SELECT generate_series(1, 5);', type: 'PostgreSQL', rarity: 'uncommon', dbType: ['postgresql'] },
    { id: 'psql_array_agg', name: 'array_agg()', emoji: 'üì¶', description: '–ê–≥—Ä–µ–≥–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–±–∏—Ä–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤. PostgreSQL.', example: 'SELECT array_agg(product_name) FROM products GROUP BY category_id;', type: 'PostgreSQL', rarity: 'rare', dbType: ['postgresql'] },
    { id: 'psql_ilike', name: 'ILIKE', emoji: 'üé≠i', description: '–†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π LIKE. PostgreSQL.', example: 'SELECT * FROM customers WHERE name ILIKE \'john%\';', type: 'PostgreSQL', rarity: 'common', dbType: ['postgresql'] },
    { id: 'psql_distinct_on', name: 'DISTINCT ON ()', emoji: '‚ú®üéØ', description: '–í—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. PostgreSQL.', example: 'SELECT DISTINCT ON (category_id) * FROM products ORDER BY category_id, price DESC;', type: 'PostgreSQL', rarity: 'epic', dbType: ['postgresql'] },
    { id: 'psql_using', name: 'USING (JOIN)', emoji: 'ü§ùüí°', description: '–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è JOIN, –µ—Å–ª–∏ –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç. PostgreSQL/MySQL.', example: 'SELECT * FROM orders o JOIN customers c USING (customer_id);', type: 'SQL', rarity: 'uncommon', dbType: ['postgresql', 'mysql'] },

    // MySQL —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
    { id: 'mysql_group_concat', name: 'GROUP_CONCAT()', emoji: 'üîóüîó', description: '–ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã —Å—Ç—Ä–æ–∫. MySQL.', example: 'SELECT GROUP_CONCAT(product_name SEPARATOR \', \') FROM products GROUP BY category_id;', type: 'MySQL', rarity: 'rare', dbType: ['mysql'] },
    { id: 'mysql_date_format', name: 'DATE_FORMAT()', emoji: 'üìÖ‚úçÔ∏è', description: '–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç. MySQL.', example: 'SELECT DATE_FORMAT(order_date, \'%Y-%m-%d\') FROM orders;', type: 'MySQL', rarity: 'uncommon', dbType: ['mysql'] },
    { id: 'mysql_regexp', name: 'REGEXP / RLIKE', emoji: 'üîçüî¨', description: '–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é. MySQL.', example: 'SELECT * FROM messages WHERE content REGEXP \'error[0-9]+\';', type: 'MySQL', rarity: 'rare', dbType: ['mysql'] },
    { id: 'mysql_straight_join', name: 'STRAIGHT_JOIN', emoji: '‚û°Ô∏èü§ù', description: '–ü—Ä–∏–Ω—É–∂–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. MySQL.', example: 'SELECT * FROM table1 STRAIGHT_JOIN table2 ON table1.id = table2.id;', type: 'MySQL', rarity: 'epic', dbType: ['mysql'] },

    // SQL Server —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
    { id: 'sqlserv_getdate', name: 'GETDATE()', emoji: 'üìÖ‚è∞', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. SQL Server.', example: 'SELECT GETDATE();', type: 'SQL Server', rarity: 'common', dbType: ['sqlserver'] },
    { id: 'sqlserv_string_split', name: 'STRING_SPLIT()', emoji: '‚úÇÔ∏èüìù', description: '–†–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é. SQL Server 2016+.', example: 'SELECT value FROM STRING_SPLIT(\'apple,banana,orange\', \',\');', type: 'SQL Server', rarity: 'uncommon', dbType: ['sqlserver'] },
    { id: 'sqlserv_try_convert', name: 'TRY_CONVERT()', emoji: '‚ùìüîÑ', description: '–ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NULL –ø—Ä–∏ –æ—à–∏–±–∫–µ. SQL Server.', example: 'SELECT TRY_CONVERT(INT, \'123x\');', type: 'SQL Server', rarity: 'uncommon', dbType: ['sqlserver'] },
    { id: 'sqlserv_for_xml_path', name: 'FOR XML PATH', emoji: 'üìÑ‚úçÔ∏è', description: '–§–æ—Ä–º–∏—Ä—É–µ—Ç XML –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞. SQL Server.', example: 'SELECT name, type FROM sys.objects FOR XML PATH(\'object\'), ROOT(\'objects\');', type: 'SQL Server', rarity: 'epic', dbType: ['sqlserver'] },
    { id: 'sqlserv_merge', name: 'MERGE', emoji: 'üîÑü§ù', description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ INSERT, UPDATE, DELETE –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏—Å—Ö–æ–¥–Ω–æ–π. SQL Server/Oracle.', example: 'MERGE target AS T USING source AS S ON T.id = S.id WHEN MATCHED THEN UPDATE SET ... WHEN NOT MATCHED THEN INSERT ...;', type: 'SQL', rarity: 'epic', dbType: ['sqlserver', 'oracle'] },


    // Oracle —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
    { id: 'ora_sysdate', name: 'SYSDATE', emoji: 'üìÖ‚è∞', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. Oracle.', example: 'SELECT SYSDATE FROM dual;', type: 'Oracle', rarity: 'common', dbType: ['oracle'] },
    { id: 'ora_nvl', name: 'NVL()', emoji: '‚ùì‚û°Ô∏è', description: '–ó–∞–º–µ–Ω—è–µ—Ç NULL —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. Oracle.', example: 'SELECT NVL(commission_pct, 0) FROM employees;', type: 'Oracle', rarity: 'common', dbType: ['oracle'] },
    { id: 'ora_listagg', name: 'LISTAGG()', emoji: 'üîóüîó', description: '–ê–≥—Ä–µ–≥–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫. Oracle.', example: 'SELECT LISTAGG(last_name, \', \') WITHIN GROUP (ORDER BY last_name) FROM employees;', type: 'Oracle', rarity: 'rare', dbType: ['oracle'] },
    { id: 'ora_connect_by_prior', name: 'CONNECT BY PRIOR', emoji: 'üå≥üîó', description: '–î–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. Oracle.', example: 'SELECT last_name, employee_id, manager_id FROM employees START WITH manager_id IS NULL CONNECT BY PRIOR employee_id = manager_id;', type: 'Oracle', rarity: 'legendary', dbType: ['oracle'] },
    { id: 'ora_flashback_query', name: 'Flashback Query', emoji: '‚è™üï∞Ô∏è', description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–æ—à–ª–æ–º. Oracle.', example: 'SELECT * FROM employees AS OF TIMESTAMP (SYSTIMESTAMP - INTERVAL \'1\' HOUR);', type: 'Oracle', rarity: 'legendary', dbType: ['oracle'] },

    // –ï—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –ø–æ—á—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    { id: 'sql_coalesce', name: 'COALESCE()', emoji: '‚ùì‚û°Ô∏è‚úÖ', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –Ω–µ-NULL –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.', example: 'SELECT COALESCE(NULL, NULL, \'Default\', \'Value\');', type: 'SQL', rarity: 'common'},
    { id: 'sql_nullif', name: 'NULLIF()', emoji: '‚ùì=üö´', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NULL, –µ—Å–ª–∏ –¥–≤–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–≤–Ω—ã, –∏–Ω–∞—á–µ –ø–µ—Ä–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.', example: 'SELECT NULLIF(col1, col2);', type: 'SQL', rarity: 'uncommon'},
    { id: 'sql_fetch_first_rows', name: 'FETCH FIRST N ROWS ONLY', emoji: '‚úÇÔ∏èüîù', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ (SQL:2008).', example: 'SELECT * FROM products ORDER BY price DESC FETCH FIRST 10 ROWS ONLY;', type: 'SQL', rarity: 'uncommon' }, // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –Ω–æ –Ω–µ –≤—Å–µ –°–£–ë–î –µ–≥–æ —Å—Ä–∞–∑—É –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏
    { id: 'sql_current_date', name: 'CURRENT_DATE', emoji: 'üìÖ', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.', example: 'SELECT CURRENT_DATE;', type: 'SQL', rarity: 'common' },
    { id: 'sql_current_timestamp', name: 'CURRENT_TIMESTAMP', emoji: 'üìÖ‚è∞', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º.', example: 'SELECT CURRENT_TIMESTAMP;', type: 'SQL', rarity: 'common' },
    { id: 'sql_extract', name: 'EXTRACT()', emoji: 'üìÖ‚úÇÔ∏è', description: '–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç—å –∏–∑ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (YEAR, MONTH, DAY –∏ —Ç.–¥.).', example: 'SELECT EXTRACT(YEAR FROM order_date) FROM orders;', type: 'SQL', rarity: 'uncommon' },
    { id: 'sql_cast', name: 'CAST()', emoji: 'üîÑ‚öñÔ∏è', description: '–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–æ–π.', example: 'SELECT CAST(\'123\' AS INT);', type: 'SQL', rarity: 'common' },
    { id: 'sql_convert', name: 'CONVERT()', emoji: 'üîÑüé®', description: '–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –°–£–ë–î, –æ—Å–æ–±–µ–Ω–Ω–æ SQL Server).', example: 'SELECT CONVERT(VARCHAR, GETDATE(), 103); (SQL Server)', type: 'SQL', rarity: 'uncommon', dbType: ['sqlserver'] }, // SQL Server –∏–º–µ–µ—Ç –º–æ—â–Ω—ã–π CONVERT –¥–ª—è –¥–∞—Ç
    { id: 'sql_rowid', name: 'ROWID / OID', emoji: 'üìçüÜî', description: '–ü—Å–µ–≤–¥–æ—Å—Ç–æ–ª–±–µ—Ü, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –°–£–ë–î).', example: 'SELECT ROWID, name FROM customers; (Oracle, PostgreSQL OID)', type: 'SQL', rarity: 'rare', dbType: ['oracle', 'postgresql'] }, // –£ PostgreSQL –µ—Å—Ç—å OID, —É Oracle ROWID
    { id: 'sql_except', name: 'EXCEPT / MINUS', emoji: '‚ûñüìã', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–º. (EXCEPT –≤ SQL Server/PostgreSQL, MINUS –≤ Oracle)', example: 'SELECT id FROM table1 EXCEPT SELECT id FROM table2;', type: 'SQL', rarity: 'rare' }, // –ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–Ω–∞—è
    { id: 'sql_intersect', name: 'INTERSECT', emoji: '‚à©üìã', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.', example: 'SELECT id FROM table1 INTERSECT SELECT id FROM table2;', type: 'SQL', rarity: 'rare' },
    { id: 'sql_greatest_least', name: 'GREATEST() / LEAST()', emoji: '‚ÜïÔ∏èüî¢', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ/–Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.', example: 'SELECT GREATEST(10, 20, 5);', type: 'SQL', rarity: 'uncommon', dbType: ['postgresql', 'mysql', 'oracle'] }, // SQL Server –Ω–µ –∏–º–µ–µ—Ç –∏—Ö –Ω–∞–ø—Ä—è–º—É—é (–Ω—É–∂–Ω–æ CASE –∏–ª–∏ VALUES)

    // –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç—Å—è ~40 –Ω–æ–≤—ã—Ö.
    // –Ø –¥–æ–±–∞–≤–∏–ª 30, —Ç–∞–∫ —á—Ç–æ –µ—â–µ 10.

    { id: 'sql_returning', name: 'RETURNING / OUTPUT', emoji: '‚Ü©Ô∏èüéÅ', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (INSERT, UPDATE, DELETE). (RETURNING –≤ PostgreSQL/Oracle, OUTPUT –≤ SQL Server)', example: 'INSERT INTO users (name) VALUES (\'Test\') RETURNING id;', type: 'SQL', rarity: 'epic', dbType: ['postgresql', 'oracle', 'sqlserver'] },
    { id: 'sql_lateral_join', name: 'LATERAL JOIN', emoji: 'üîó‚û°Ô∏è', description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∑–∞–ø—Ä–æ—Å—É –≤ FROM —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–∞–±–ª–∏—Ü. (LATERAL –≤ PostgreSQL, APPLY –≤ SQL Server/Oracle)', example: 'SELECT u.name, p.product_name FROM users u, LATERAL (SELECT * FROM products WHERE user_id = u.id ORDER BY price DESC LIMIT 1) p;', type: 'SQL', rarity: 'epic', dbType: ['postgresql', 'sqlserver', 'oracle'] }, // APPLY - –∞–Ω–∞–ª–æ–≥
    { id: 'sql_values_constructor', name: 'VALUES Constructor', emoji: 'üß±üî¢', description: '–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ –Ω–∞–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π.', example: 'SELECT * FROM (VALUES (1, \'A\'), (2, \'B\')) AS t (id, val);', type: 'SQL', rarity: 'uncommon' },
    { id: 'sql_for_update', name: 'FOR UPDATE / OF', emoji: 'üîí‚úèÔ∏è', description: '–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.', example: 'SELECT * FROM accounts WHERE id = 1 FOR UPDATE;', type: 'SQL', rarity: 'epic' }, // –û–±—â–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –º–æ–∂–µ—Ç —á—É—Ç—å –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
    { id: 'sql_sequence', name: 'CREATE SEQUENCE', emoji: 'üî¢‚öôÔ∏è', description: '–°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.', example: 'CREATE SEQUENCE user_id_seq START WITH 100;', type: 'SQL', rarity: 'rare', dbType: ['postgresql', 'oracle', 'sqlserver'] }, // SQL Server —Å SQL 2012
    { id: 'sql_window_ntile', name: 'NTILE()', emoji: 'üìäüî™', description: '–†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø (–∫–≤–∞—Ä—Ç–∏–ª–∏, –¥–µ—Ü–∏–ª–∏ –∏ —Ç.–¥.).', example: 'SELECT name, salary, NTILE(4) OVER (ORDER BY salary DESC) AS quartile FROM employees;', type: 'SQL', rarity: 'rare'},
    { id: 'sql_window_first_value', name: 'FIRST_VALUE()', emoji: 'ü•áü™ü', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ.', example: 'SELECT name, department, salary, FIRST_VALUE(name) OVER (PARTITION BY department ORDER BY salary DESC) AS highest_paid FROM employees;', type: 'SQL', rarity: 'rare'},
    { id: 'sql_window_last_value', name: 'LAST_VALUE()', emoji: 'Íº¥ü™ü', description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ.', example: 'SELECT name, department, salary, LAST_VALUE(name) OVER (PARTITION BY department ORDER BY salary DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS lowest_paid_overall_in_dept FROM employees;', type: 'SQL', rarity: 'rare'},
    { id: 'sql_comments_single', name: '-- (Comment)', emoji: 'üí¨‚ûñ', description: '–û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ SQL.', example: '-- –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π \nSELECT * FROM users;', type: 'SQL', rarity: 'common'},
    { id: 'sql_comments_multi', name: '/* */ (Comment)', emoji: 'üí¨üß±', description: '–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ SQL.', example: '/* –≠—Ç–æ \n –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π \n –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */\nSELECT * FROM users;', type: 'SQL', rarity: 'common'}

];

const QUERY_CONSTRUCTION_TASKS = [
    {
        id: 'task_select_all_users',
        name: '–ü—Ä–æ—Å—Ç–∞—è –≤—ã–±–æ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        description: '–°–æ–∑–¥–∞–π—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã (`*`) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `Users`.',
        targetQueryStructure: [
            { keyword: 'SELECT', value: '*' },
            { keyword: 'FROM', value: 'Users' }
        ],
        requiredFunctions: ['sql_select', 'sql_from'],
        availableTables: ['Users', 'Products', 'Orders'],
        availableColumns: {
            'Users': ['UserID', 'UserName', 'Email'],
            'Products': ['ProductID', 'ProductName', 'Price'],
            'Orders': ['OrderID', 'CustomerID', 'OrderDate']
        },
        rewardXp: 15,
        unlocksNextTaskId: 'task_select_specific_columns'
    },
    {
        id: 'task_select_specific_columns',
        name: '–í—ã–±–æ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤',
        description: '–°–æ–∑–¥–∞–π—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã `ProductName` –∏ `Price` –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `Products`.',
        targetQueryStructure: [
            { keyword: 'SELECT', value: ['ProductName', 'Price'] },
            { keyword: 'FROM', value: 'Products' }
        ],
        requiredFunctions: ['sql_select', 'sql_from'],
        availableTables: ['Users', 'Products', 'Orders'],
        availableColumns: {
            'Users': ['UserID', 'UserName', 'Email'],
            'Products': ['ProductID', 'ProductName', 'Price'],
            'Orders': ['OrderID', 'CustomerID', 'OrderDate']
        },
        rewardXp: 20,
        unlocksNextTaskId: 'task_filter_products'
    },
    {
        id: 'task_filter_products',
        name: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
        description: '–°–æ–∑–¥–∞–π—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å `ProductName` –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `Products`, –≥–¥–µ `Price` –±–æ–ª—å—à–µ `100`.',
        targetQueryStructure: [
            { keyword: 'SELECT', value: 'ProductName' },
            { keyword: 'FROM', value: 'Products' },
            { keyword: 'WHERE', condition: { column: 'Price', operator: '>', value: 100 } }
        ],
        requiredFunctions: ['sql_select', 'sql_from', 'sql_where'],
        availableTables: ['Users', 'Products', 'Orders'],
        availableColumns: {
            'Products': ['ProductID', 'ProductName', 'Price']
        },
        rewardXp: 30,
        unlocksNextTaskId: 'task_join_tables'
    },
    {
        id: 'task_join_tables',
        name: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü',
        description: '–°–æ–∑–¥–∞–π—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å `Orders.OrderID` –∏ `Customers.CustomerName` –∏–∑ —Ç–∞–±–ª–∏—Ü `Orders` –∏ `Customers`, –æ–±—ä–µ–¥–∏–Ω–∏–≤ –∏—Ö –ø–æ `CustomerID`.',
        targetQueryStructure: [
            { keyword: 'SELECT', value: ['Orders.OrderID', 'Customers.CustomerName'] },
            { keyword: 'FROM', value: 'Orders' },
            { keyword: 'JOIN', joinTable: 'Customers', onCondition: 'Orders.CustomerID=Customers.CustomerID' } // –£–±—Ä–∞–ª –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        ],
        requiredFunctions: ['sql_select', 'sql_from', 'sql_join'],
        availableTables: ['Users', 'Products', 'Orders', 'Customers'],
        availableColumns: {
            'Users': ['UserID', 'UserName', 'Email'],
            'Products': ['ProductID', 'ProductName', 'Price'],
            'Orders': ['OrderID', 'CustomerID', 'OrderDate'],
            'Customers': ['CustomerID', 'CustomerName', 'City']
        },
        rewardXp: 50,
        unlocksNextTaskId: null
    }
];
